// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package handler

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	pin "github.com/yseto/gion-go/internal/pin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /)
	Index(ctx echo.Context) error

	// (POST /api/categories)
	Categories(ctx echo.Context) error

	// (POST /api/category_with_count)
	CategoryAndUnreadEntryCount(ctx echo.Context) error

	// (POST /api/change_subscription)
	ChangeSubscription(ctx echo.Context) error

	// (POST /api/delete_subscription)
	DeleteSubscription(ctx echo.Context) error

	// (POST /api/examine_subscription)
	ExamineSubscription(ctx echo.Context) error

	// (POST /api/login)
	Login(ctx echo.Context) error

	// (POST /api/logout)
	Logout(ctx echo.Context) error

	// (POST /api/opml_export)
	OpmlExport(ctx echo.Context) error

	// (POST /api/opml_import)
	OpmlImport(ctx echo.Context) error

	// (POST /api/pinned_items)
	PinnedItems(ctx echo.Context) error

	// (POST /api/profile)
	Profile(ctx echo.Context) error

	// (POST /api/register_category)
	RegisterCategory(ctx echo.Context) error

	// (POST /api/register_subscription)
	RegisterSubscription(ctx echo.Context) error

	// (POST /api/remove_all_pin)
	RemoveAllPin(ctx echo.Context) error

	// (POST /api/set_asread)
	SetAsRead(ctx echo.Context) error

	// (POST /api/set_pin)
	SetPin(ctx echo.Context) error

	// (POST /api/set_profile)
	UpdateProfile(ctx echo.Context) error

	// (POST /api/subscriptions)
	Subscriptions(ctx echo.Context) error

	// (POST /api/unread_entry)
	UnreadEntry(ctx echo.Context) error

	// (POST /api/update_password)
	UpdatePassword(ctx echo.Context) error

	// (GET /{filename})
	ServeRootFile(ctx echo.Context, filename string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Index converts echo context to params.
func (w *ServerInterfaceWrapper) Index(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Index(ctx)
	return err
}

// Categories converts echo context to params.
func (w *ServerInterfaceWrapper) Categories(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Categories(ctx)
	return err
}

// CategoryAndUnreadEntryCount converts echo context to params.
func (w *ServerInterfaceWrapper) CategoryAndUnreadEntryCount(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CategoryAndUnreadEntryCount(ctx)
	return err
}

// ChangeSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeSubscription(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeSubscription(ctx)
	return err
}

// DeleteSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSubscription(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSubscription(ctx)
	return err
}

// ExamineSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) ExamineSubscription(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExamineSubscription(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// OpmlExport converts echo context to params.
func (w *ServerInterfaceWrapper) OpmlExport(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OpmlExport(ctx)
	return err
}

// OpmlImport converts echo context to params.
func (w *ServerInterfaceWrapper) OpmlImport(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OpmlImport(ctx)
	return err
}

// PinnedItems converts echo context to params.
func (w *ServerInterfaceWrapper) PinnedItems(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PinnedItems(ctx)
	return err
}

// Profile converts echo context to params.
func (w *ServerInterfaceWrapper) Profile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Profile(ctx)
	return err
}

// RegisterCategory converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterCategory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterCategory(ctx)
	return err
}

// RegisterSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterSubscription(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterSubscription(ctx)
	return err
}

// RemoveAllPin converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveAllPin(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveAllPin(ctx)
	return err
}

// SetAsRead converts echo context to params.
func (w *ServerInterfaceWrapper) SetAsRead(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetAsRead(ctx)
	return err
}

// SetPin converts echo context to params.
func (w *ServerInterfaceWrapper) SetPin(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetPin(ctx)
	return err
}

// UpdateProfile converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateProfile(ctx)
	return err
}

// Subscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) Subscriptions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Subscriptions(ctx)
	return err
}

// UnreadEntry converts echo context to params.
func (w *ServerInterfaceWrapper) UnreadEntry(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnreadEntry(ctx)
	return err
}

// UpdatePassword converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePassword(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePassword(ctx)
	return err
}

// ServeRootFile converts echo context to params.
func (w *ServerInterfaceWrapper) ServeRootFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "filename" -------------
	var filename string

	err = runtime.BindStyledParameterWithLocation("simple", false, "filename", runtime.ParamLocationPath, ctx.Param("filename"), &filename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filename: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServeRootFile(ctx, filename)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.Index)
	router.POST(baseURL+"/api/categories", wrapper.Categories)
	router.POST(baseURL+"/api/category_with_count", wrapper.CategoryAndUnreadEntryCount)
	router.POST(baseURL+"/api/change_subscription", wrapper.ChangeSubscription)
	router.POST(baseURL+"/api/delete_subscription", wrapper.DeleteSubscription)
	router.POST(baseURL+"/api/examine_subscription", wrapper.ExamineSubscription)
	router.POST(baseURL+"/api/login", wrapper.Login)
	router.POST(baseURL+"/api/logout", wrapper.Logout)
	router.POST(baseURL+"/api/opml_export", wrapper.OpmlExport)
	router.POST(baseURL+"/api/opml_import", wrapper.OpmlImport)
	router.POST(baseURL+"/api/pinned_items", wrapper.PinnedItems)
	router.POST(baseURL+"/api/profile", wrapper.Profile)
	router.POST(baseURL+"/api/register_category", wrapper.RegisterCategory)
	router.POST(baseURL+"/api/register_subscription", wrapper.RegisterSubscription)
	router.POST(baseURL+"/api/remove_all_pin", wrapper.RemoveAllPin)
	router.POST(baseURL+"/api/set_asread", wrapper.SetAsRead)
	router.POST(baseURL+"/api/set_pin", wrapper.SetPin)
	router.POST(baseURL+"/api/set_profile", wrapper.UpdateProfile)
	router.POST(baseURL+"/api/subscriptions", wrapper.Subscriptions)
	router.POST(baseURL+"/api/unread_entry", wrapper.UnreadEntry)
	router.POST(baseURL+"/api/update_password", wrapper.UpdatePassword)
	router.GET(baseURL+"/:filename", wrapper.ServeRootFile)

}

type IndexRequestObject struct {
}

type IndexResponseObject interface {
	VisitIndexResponse(w http.ResponseWriter) error
}

type Index200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response Index200TexthtmlResponse) VisitIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CategoriesRequestObject struct {
}

type CategoriesResponseObject interface {
	VisitCategoriesResponse(w http.ResponseWriter) error
}

type Categories200JSONResponse []Category

func (response Categories200JSONResponse) VisitCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Categories400Response struct {
}

func (response Categories400Response) VisitCategoriesResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CategoryAndUnreadEntryCountRequestObject struct {
}

type CategoryAndUnreadEntryCountResponseObject interface {
	VisitCategoryAndUnreadEntryCountResponse(w http.ResponseWriter) error
}

type CategoryAndUnreadEntryCount200JSONResponse []CategoryAndUnreadEntryCount

func (response CategoryAndUnreadEntryCount200JSONResponse) VisitCategoryAndUnreadEntryCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CategoryAndUnreadEntryCount400Response struct {
}

func (response CategoryAndUnreadEntryCount400Response) VisitCategoryAndUnreadEntryCountResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ChangeSubscriptionRequestObject struct {
	Body *ChangeSubscriptionJSONRequestBody
}

type ChangeSubscriptionResponseObject interface {
	VisitChangeSubscriptionResponse(w http.ResponseWriter) error
}

type ChangeSubscription200JSONResponse SimpleResult

func (response ChangeSubscription200JSONResponse) VisitChangeSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeSubscription400Response struct {
}

func (response ChangeSubscription400Response) VisitChangeSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteSubscriptionRequestObject struct {
	Body *DeleteSubscriptionJSONRequestBody
}

type DeleteSubscriptionResponseObject interface {
	VisitDeleteSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteSubscription200JSONResponse SimpleResult

func (response DeleteSubscription200JSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription400Response struct {
}

func (response DeleteSubscription400Response) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ExamineSubscriptionRequestObject struct {
	Body *ExamineSubscriptionJSONRequestBody
}

type ExamineSubscriptionResponseObject interface {
	VisitExamineSubscriptionResponse(w http.ResponseWriter) error
}

type ExamineSubscription200JSONResponse ExamineSubscription

func (response ExamineSubscription200JSONResponse) VisitExamineSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse Authorization

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LogindefaultResponseHeaders struct {
	WWWAuthenticate string
}

type LogindefaultResponse struct {
	Headers LogindefaultResponseHeaders

	StatusCode int
}

func (response LogindefaultResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("WWW-Authenticate", fmt.Sprint(response.Headers.WWWAuthenticate))
	w.WriteHeader(response.StatusCode)
	return nil
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout200JSONResponse map[string]interface{}

func (response Logout200JSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OpmlExportRequestObject struct {
}

type OpmlExportResponseObject interface {
	VisitOpmlExportResponse(w http.ResponseWriter) error
}

type OpmlExport200JSONResponse struct {
	// Xml XML document
	Xml string `json:"xml"`
}

func (response OpmlExport200JSONResponse) VisitOpmlExportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OpmlExport400Response struct {
}

func (response OpmlExport400Response) VisitOpmlExportResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type OpmlImportRequestObject struct {
	Body *OpmlImportJSONRequestBody
}

type OpmlImportResponseObject interface {
	VisitOpmlImportResponse(w http.ResponseWriter) error
}

type OpmlImport200JSONResponse struct {
	Done bool `json:"done"`
}

func (response OpmlImport200JSONResponse) VisitOpmlImportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OpmlImport400Response struct {
}

func (response OpmlImport400Response) VisitOpmlImportResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PinnedItemsRequestObject struct {
}

type PinnedItemsResponseObject interface {
	VisitPinnedItemsResponse(w http.ResponseWriter) error
}

type PinnedItems200JSONResponse []PinnedItem

func (response PinnedItems200JSONResponse) VisitPinnedItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PinnedItems400Response struct {
}

func (response PinnedItems400Response) VisitPinnedItemsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ProfileRequestObject struct {
}

type ProfileResponseObject interface {
	VisitProfileResponse(w http.ResponseWriter) error
}

type Profile200JSONResponse Profile

func (response Profile200JSONResponse) VisitProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Profile400Response struct {
}

func (response Profile400Response) VisitProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type RegisterCategoryRequestObject struct {
	Body *RegisterCategoryJSONRequestBody
}

type RegisterCategoryResponseObject interface {
	VisitRegisterCategoryResponse(w http.ResponseWriter) error
}

type RegisterCategory200JSONResponse SimpleResult

func (response RegisterCategory200JSONResponse) VisitRegisterCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RegisterCategory400Response struct {
}

func (response RegisterCategory400Response) VisitRegisterCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type RegisterSubscriptionRequestObject struct {
	Body *RegisterSubscriptionJSONRequestBody
}

type RegisterSubscriptionResponseObject interface {
	VisitRegisterSubscriptionResponse(w http.ResponseWriter) error
}

type RegisterSubscription200JSONResponse SimpleResult

func (response RegisterSubscription200JSONResponse) VisitRegisterSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RegisterSubscription400Response struct {
}

func (response RegisterSubscription400Response) VisitRegisterSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type RemoveAllPinRequestObject struct {
}

type RemoveAllPinResponseObject interface {
	VisitRemoveAllPinResponse(w http.ResponseWriter) error
}

type RemoveAllPin200JSONResponse SimpleResult

func (response RemoveAllPin200JSONResponse) VisitRemoveAllPinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RemoveAllPin400Response struct {
}

func (response RemoveAllPin400Response) VisitRemoveAllPinResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SetAsReadRequestObject struct {
	Body *SetAsReadJSONRequestBody
}

type SetAsReadResponseObject interface {
	VisitSetAsReadResponse(w http.ResponseWriter) error
}

type SetAsRead200JSONResponse SimpleResult

func (response SetAsRead200JSONResponse) VisitSetAsReadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SetAsRead400Response struct {
}

func (response SetAsRead400Response) VisitSetAsReadResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SetPinRequestObject struct {
	Body *SetPinJSONRequestBody
}

type SetPinResponseObject interface {
	VisitSetPinResponse(w http.ResponseWriter) error
}

type SetPin200JSONResponse struct {
	Readflag pin.ReadFlag `json:"readflag"`
}

func (response SetPin200JSONResponse) VisitSetPinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SetPin400Response struct {
}

func (response SetPin400Response) VisitSetPinResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdateProfileRequestObject struct {
	Body *UpdateProfileJSONRequestBody
}

type UpdateProfileResponseObject interface {
	VisitUpdateProfileResponse(w http.ResponseWriter) error
}

type UpdateProfile200JSONResponse SimpleResult

func (response UpdateProfile200JSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfile400Response struct {
}

func (response UpdateProfile400Response) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SubscriptionsRequestObject struct {
}

type SubscriptionsResponseObject interface {
	VisitSubscriptionsResponse(w http.ResponseWriter) error
}

type Subscriptions200JSONResponse []Subscription

func (response Subscriptions200JSONResponse) VisitSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Subscriptions400Response struct {
}

func (response Subscriptions400Response) VisitSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UnreadEntryRequestObject struct {
	Body *UnreadEntryJSONRequestBody
}

type UnreadEntryResponseObject interface {
	VisitUnreadEntryResponse(w http.ResponseWriter) error
}

type UnreadEntry200JSONResponse []UnreadEntry

func (response UnreadEntry200JSONResponse) VisitUnreadEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UnreadEntry400Response struct {
}

func (response UnreadEntry400Response) VisitUnreadEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdatePasswordRequestObject struct {
	Body *UpdatePasswordJSONRequestBody
}

type UpdatePasswordResponseObject interface {
	VisitUpdatePasswordResponse(w http.ResponseWriter) error
}

type UpdatePassword200JSONResponse SimpleResult

func (response UpdatePassword200JSONResponse) VisitUpdatePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePassword400Response struct {
}

func (response UpdatePassword400Response) VisitUpdatePasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ServeRootFileRequestObject struct {
	Filename string `json:"filename"`
}

type ServeRootFileResponseObject interface {
	VisitServeRootFileResponse(w http.ResponseWriter) error
}

type ServeRootFile200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ServeRootFile200TexthtmlResponse) VisitServeRootFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ServeRootFile404Response struct {
}

func (response ServeRootFile404Response) VisitServeRootFileResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /)
	Index(ctx context.Context, request IndexRequestObject) (IndexResponseObject, error)

	// (POST /api/categories)
	Categories(ctx context.Context, request CategoriesRequestObject) (CategoriesResponseObject, error)

	// (POST /api/category_with_count)
	CategoryAndUnreadEntryCount(ctx context.Context, request CategoryAndUnreadEntryCountRequestObject) (CategoryAndUnreadEntryCountResponseObject, error)

	// (POST /api/change_subscription)
	ChangeSubscription(ctx context.Context, request ChangeSubscriptionRequestObject) (ChangeSubscriptionResponseObject, error)

	// (POST /api/delete_subscription)
	DeleteSubscription(ctx context.Context, request DeleteSubscriptionRequestObject) (DeleteSubscriptionResponseObject, error)

	// (POST /api/examine_subscription)
	ExamineSubscription(ctx context.Context, request ExamineSubscriptionRequestObject) (ExamineSubscriptionResponseObject, error)

	// (POST /api/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)

	// (POST /api/logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)

	// (POST /api/opml_export)
	OpmlExport(ctx context.Context, request OpmlExportRequestObject) (OpmlExportResponseObject, error)

	// (POST /api/opml_import)
	OpmlImport(ctx context.Context, request OpmlImportRequestObject) (OpmlImportResponseObject, error)

	// (POST /api/pinned_items)
	PinnedItems(ctx context.Context, request PinnedItemsRequestObject) (PinnedItemsResponseObject, error)

	// (POST /api/profile)
	Profile(ctx context.Context, request ProfileRequestObject) (ProfileResponseObject, error)

	// (POST /api/register_category)
	RegisterCategory(ctx context.Context, request RegisterCategoryRequestObject) (RegisterCategoryResponseObject, error)

	// (POST /api/register_subscription)
	RegisterSubscription(ctx context.Context, request RegisterSubscriptionRequestObject) (RegisterSubscriptionResponseObject, error)

	// (POST /api/remove_all_pin)
	RemoveAllPin(ctx context.Context, request RemoveAllPinRequestObject) (RemoveAllPinResponseObject, error)

	// (POST /api/set_asread)
	SetAsRead(ctx context.Context, request SetAsReadRequestObject) (SetAsReadResponseObject, error)

	// (POST /api/set_pin)
	SetPin(ctx context.Context, request SetPinRequestObject) (SetPinResponseObject, error)

	// (POST /api/set_profile)
	UpdateProfile(ctx context.Context, request UpdateProfileRequestObject) (UpdateProfileResponseObject, error)

	// (POST /api/subscriptions)
	Subscriptions(ctx context.Context, request SubscriptionsRequestObject) (SubscriptionsResponseObject, error)

	// (POST /api/unread_entry)
	UnreadEntry(ctx context.Context, request UnreadEntryRequestObject) (UnreadEntryResponseObject, error)

	// (POST /api/update_password)
	UpdatePassword(ctx context.Context, request UpdatePasswordRequestObject) (UpdatePasswordResponseObject, error)

	// (GET /{filename})
	ServeRootFile(ctx context.Context, request ServeRootFileRequestObject) (ServeRootFileResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictEchoHandlerFunc
type StrictMiddlewareFunc = runtime.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Index operation middleware
func (sh *strictHandler) Index(ctx echo.Context) error {
	var request IndexRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Index(ctx.Request().Context(), request.(IndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Index")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(IndexResponseObject); ok {
		return validResponse.VisitIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Categories operation middleware
func (sh *strictHandler) Categories(ctx echo.Context) error {
	var request CategoriesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Categories(ctx.Request().Context(), request.(CategoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Categories")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CategoriesResponseObject); ok {
		return validResponse.VisitCategoriesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CategoryAndUnreadEntryCount operation middleware
func (sh *strictHandler) CategoryAndUnreadEntryCount(ctx echo.Context) error {
	var request CategoryAndUnreadEntryCountRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CategoryAndUnreadEntryCount(ctx.Request().Context(), request.(CategoryAndUnreadEntryCountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CategoryAndUnreadEntryCount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CategoryAndUnreadEntryCountResponseObject); ok {
		return validResponse.VisitCategoryAndUnreadEntryCountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ChangeSubscription operation middleware
func (sh *strictHandler) ChangeSubscription(ctx echo.Context) error {
	var request ChangeSubscriptionRequestObject

	var body ChangeSubscriptionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeSubscription(ctx.Request().Context(), request.(ChangeSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ChangeSubscriptionResponseObject); ok {
		return validResponse.VisitChangeSubscriptionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteSubscription operation middleware
func (sh *strictHandler) DeleteSubscription(ctx echo.Context) error {
	var request DeleteSubscriptionRequestObject

	var body DeleteSubscriptionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubscription(ctx.Request().Context(), request.(DeleteSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteSubscriptionResponseObject); ok {
		return validResponse.VisitDeleteSubscriptionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ExamineSubscription operation middleware
func (sh *strictHandler) ExamineSubscription(ctx echo.Context) error {
	var request ExamineSubscriptionRequestObject

	var body ExamineSubscriptionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExamineSubscription(ctx.Request().Context(), request.(ExamineSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExamineSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ExamineSubscriptionResponseObject); ok {
		return validResponse.VisitExamineSubscriptionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Login operation middleware
func (sh *strictHandler) Login(ctx echo.Context) error {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx.Request().Context(), request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		return validResponse.VisitLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx echo.Context) error {
	var request LogoutRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx.Request().Context(), request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		return validResponse.VisitLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// OpmlExport operation middleware
func (sh *strictHandler) OpmlExport(ctx echo.Context) error {
	var request OpmlExportRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OpmlExport(ctx.Request().Context(), request.(OpmlExportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OpmlExport")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OpmlExportResponseObject); ok {
		return validResponse.VisitOpmlExportResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// OpmlImport operation middleware
func (sh *strictHandler) OpmlImport(ctx echo.Context) error {
	var request OpmlImportRequestObject

	var body OpmlImportJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OpmlImport(ctx.Request().Context(), request.(OpmlImportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OpmlImport")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OpmlImportResponseObject); ok {
		return validResponse.VisitOpmlImportResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PinnedItems operation middleware
func (sh *strictHandler) PinnedItems(ctx echo.Context) error {
	var request PinnedItemsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PinnedItems(ctx.Request().Context(), request.(PinnedItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PinnedItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PinnedItemsResponseObject); ok {
		return validResponse.VisitPinnedItemsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Profile operation middleware
func (sh *strictHandler) Profile(ctx echo.Context) error {
	var request ProfileRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Profile(ctx.Request().Context(), request.(ProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Profile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProfileResponseObject); ok {
		return validResponse.VisitProfileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// RegisterCategory operation middleware
func (sh *strictHandler) RegisterCategory(ctx echo.Context) error {
	var request RegisterCategoryRequestObject

	var body RegisterCategoryJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterCategory(ctx.Request().Context(), request.(RegisterCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RegisterCategoryResponseObject); ok {
		return validResponse.VisitRegisterCategoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// RegisterSubscription operation middleware
func (sh *strictHandler) RegisterSubscription(ctx echo.Context) error {
	var request RegisterSubscriptionRequestObject

	var body RegisterSubscriptionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterSubscription(ctx.Request().Context(), request.(RegisterSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RegisterSubscriptionResponseObject); ok {
		return validResponse.VisitRegisterSubscriptionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// RemoveAllPin operation middleware
func (sh *strictHandler) RemoveAllPin(ctx echo.Context) error {
	var request RemoveAllPinRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveAllPin(ctx.Request().Context(), request.(RemoveAllPinRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveAllPin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RemoveAllPinResponseObject); ok {
		return validResponse.VisitRemoveAllPinResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SetAsRead operation middleware
func (sh *strictHandler) SetAsRead(ctx echo.Context) error {
	var request SetAsReadRequestObject

	var body SetAsReadJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SetAsRead(ctx.Request().Context(), request.(SetAsReadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetAsRead")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SetAsReadResponseObject); ok {
		return validResponse.VisitSetAsReadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SetPin operation middleware
func (sh *strictHandler) SetPin(ctx echo.Context) error {
	var request SetPinRequestObject

	var body SetPinJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SetPin(ctx.Request().Context(), request.(SetPinRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetPin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SetPinResponseObject); ok {
		return validResponse.VisitSetPinResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UpdateProfile operation middleware
func (sh *strictHandler) UpdateProfile(ctx echo.Context) error {
	var request UpdateProfileRequestObject

	var body UpdateProfileJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProfile(ctx.Request().Context(), request.(UpdateProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateProfileResponseObject); ok {
		return validResponse.VisitUpdateProfileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Subscriptions operation middleware
func (sh *strictHandler) Subscriptions(ctx echo.Context) error {
	var request SubscriptionsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Subscriptions(ctx.Request().Context(), request.(SubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Subscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SubscriptionsResponseObject); ok {
		return validResponse.VisitSubscriptionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UnreadEntry operation middleware
func (sh *strictHandler) UnreadEntry(ctx echo.Context) error {
	var request UnreadEntryRequestObject

	var body UnreadEntryJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UnreadEntry(ctx.Request().Context(), request.(UnreadEntryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnreadEntry")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UnreadEntryResponseObject); ok {
		return validResponse.VisitUnreadEntryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UpdatePassword operation middleware
func (sh *strictHandler) UpdatePassword(ctx echo.Context) error {
	var request UpdatePasswordRequestObject

	var body UpdatePasswordJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePassword(ctx.Request().Context(), request.(UpdatePasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdatePasswordResponseObject); ok {
		return validResponse.VisitUpdatePasswordResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ServeRootFile operation middleware
func (sh *strictHandler) ServeRootFile(ctx echo.Context, filename string) error {
	var request ServeRootFileRequestObject

	request.Filename = filename

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ServeRootFile(ctx.Request().Context(), request.(ServeRootFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ServeRootFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ServeRootFileResponseObject); ok {
		return validResponse.VisitServeRootFileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}
