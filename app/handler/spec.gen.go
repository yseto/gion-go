// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"6zUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
