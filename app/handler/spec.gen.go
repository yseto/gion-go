// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
