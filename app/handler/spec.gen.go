// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
