// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"oB+uDP8bAAD//wlGHXXBNAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
