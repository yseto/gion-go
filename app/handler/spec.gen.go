// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4X8DAAD//2tYXrB/NQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
