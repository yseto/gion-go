// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4rX42wAAAP//Wabjd8k1AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
