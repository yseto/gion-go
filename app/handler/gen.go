//go:build go1.22

// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	pin "github.com/yseto/gion-go/internal/pin"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// AsRead 既読情報
type AsRead struct {
	FeedID uint64 `json:"feed_id"`
	Serial uint64 `json:"serial"`
}

// Authorization ログイン情報
type Authorization struct {
	Autoseen bool   `json:"autoseen"`
	Token    string `json:"token"`
}

// Category カテゴリ一覧
type Category struct {
	ID   uint64 `json:"id"`
	Name string `json:"name"`
}

// CategoryAndUnreadEntryCount カテゴリごとに未読記事数
type CategoryAndUnreadEntryCount struct {
	Count uint64 `json:"count"`

	// ID category ID
	ID   uint64 `json:"id"`
	Name string `json:"name"`
}

// CategorySubscription defines model for CategorySubscription.
type CategorySubscription struct {
	CategoryId uint64 `json:"category_id"`

	// HttpStatus 最終アクセス時のレスポンスコード
	HttpStatus string `json:"http_status"`

	// FeedID フィードID
	FeedID uint64 `json:"id"`

	// Siteurl フィード配信元サイトURL
	Siteurl string `json:"siteurl"`
	Title   string `json:"title"`
}

// ExamineFeed フィード探索におけるフィード詳細
type ExamineFeed struct {
	Date  string `json:"date"`
	Title string `json:"title"`
	Url   string `json:"url"`
}

// ExamineSubscription フィード探索
type ExamineSubscription struct {
	PreviewFeed []ExamineFeed `json:"preview_feed"`
	Success     bool          `json:"success"`
	Title       string        `json:"title"`
	URL         string        `json:"url"`
}

// PinnedItem ピン止めしたアイテム
type PinnedItem struct {
	FeedId   uint64         `json:"feed_id"`
	Serial   uint64         `json:"serial"`
	Title    string         `json:"title"`
	UpdateAt pin.UpdateTime `json:"update_at"`
	Url      string         `json:"url"`
}

// Profile 個人設定
type Profile struct {
	Autoseen           bool   `json:"autoseen"`
	EntryCount         uint64 `json:"entryCount"`
	OnLoginSkipPinList bool   `json:"onLoginSkipPinList"`
	SubstringLength    uint64 `json:"substringLength"`
}

// Subscription カテゴリおよび購読一覧
type Subscription struct {
	// CategoryID カテゴリID
	CategoryID uint64 `json:"id"`

	// Name カテゴリ名
	Name string `json:"name"`

	// Subscription カテゴリに属するフィード一覧
	Subscription []CategorySubscription `json:"subscription"`
}

// UnreadEntry カテゴリに属した未読記事一覧
type UnreadEntry struct {
	DateEpoch      uint64       `json:"date_epoch"`
	Description    string       `json:"description"`
	FeedId         uint64       `json:"feed_id"`
	Readflag       pin.ReadFlag `json:"readflag"`
	Serial         uint64       `json:"serial"`
	SiteTitle      string       `json:"site_title"`
	SubscriptionId uint64       `json:"subscription_id"`
	Title          string       `json:"title"`
	Url            string       `json:"url"`
}

// RegisterCategoryJSONBody defines parameters for RegisterCategory.
type RegisterCategoryJSONBody struct {
	Name string `json:"name"`
}

// ExamineSubscriptionJSONBody defines parameters for ExamineSubscription.
type ExamineSubscriptionJSONBody struct {
	// Url Site URL
	Url string `json:"url"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	Id       string `json:"id"`
	Password string `json:"password"`
}

// OpmlImportJSONBody defines parameters for OpmlImport.
type OpmlImportJSONBody struct {
	// Xml Opml xml document
	Xml string `json:"xml"`
}

// SetPinJSONBody defines parameters for SetPin.
type SetPinJSONBody struct {
	FeedId   uint64       `json:"feed_id"`
	Readflag pin.ReadFlag `json:"readflag"`
	Serial   uint64       `json:"serial"`
}

// SetAsReadJSONBody defines parameters for SetAsRead.
type SetAsReadJSONBody = []AsRead

// RegisterSubscriptionJSONBody defines parameters for RegisterSubscription.
type RegisterSubscriptionJSONBody struct {
	Category uint64 `json:"category"`

	// Rss RSS Feed URL
	Rss string `json:"rss"`

	// Title Site Title
	Title string `json:"title"`

	// Url Site URL
	Url string `json:"url"`
}

// ChangeSubscriptionJSONBody defines parameters for ChangeSubscription.
type ChangeSubscriptionJSONBody struct {
	Category uint64 `json:"category"`
}

// UpdatePasswordJSONBody defines parameters for UpdatePassword.
type UpdatePasswordJSONBody struct {
	Password    string `json:"password"`
	PasswordOld string `json:"password_old"`
	Passwordc   string `json:"passwordc"`
}

// RegisterCategoryJSONRequestBody defines body for RegisterCategory for application/json ContentType.
type RegisterCategoryJSONRequestBody RegisterCategoryJSONBody

// ExamineSubscriptionJSONRequestBody defines body for ExamineSubscription for application/json ContentType.
type ExamineSubscriptionJSONRequestBody ExamineSubscriptionJSONBody

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// OpmlImportJSONRequestBody defines body for OpmlImport for application/json ContentType.
type OpmlImportJSONRequestBody OpmlImportJSONBody

// SetPinJSONRequestBody defines body for SetPin for application/json ContentType.
type SetPinJSONRequestBody SetPinJSONBody

// SetAsReadJSONRequestBody defines body for SetAsRead for application/json ContentType.
type SetAsReadJSONRequestBody = SetAsReadJSONBody

// UpdateProfileJSONRequestBody defines body for UpdateProfile for application/json ContentType.
type UpdateProfileJSONRequestBody = Profile

// RegisterSubscriptionJSONRequestBody defines body for RegisterSubscription for application/json ContentType.
type RegisterSubscriptionJSONRequestBody RegisterSubscriptionJSONBody

// ChangeSubscriptionJSONRequestBody defines body for ChangeSubscription for application/json ContentType.
type ChangeSubscriptionJSONRequestBody ChangeSubscriptionJSONBody

// UpdatePasswordJSONRequestBody defines body for UpdatePassword for application/json ContentType.
type UpdatePasswordJSONRequestBody UpdatePasswordJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /)
	Index(w http.ResponseWriter, r *http.Request)

	// (GET /api/category)
	Categories(w http.ResponseWriter, r *http.Request)

	// (POST /api/category)
	RegisterCategory(w http.ResponseWriter, r *http.Request)

	// (GET /api/category/{category_id}/entry)
	UnreadEntry(w http.ResponseWriter, r *http.Request, categoryId uint64)

	// (DELETE /api/category/{id})
	DeleteCategory(w http.ResponseWriter, r *http.Request, id uint64)

	// (GET /api/category_with_count)
	CategoryAndUnreadEntryCount(w http.ResponseWriter, r *http.Request)

	// (POST /api/examine_subscription)
	ExamineSubscription(w http.ResponseWriter, r *http.Request)

	// (POST /api/login)
	Login(w http.ResponseWriter, r *http.Request)

	// (POST /api/logout)
	Logout(w http.ResponseWriter, r *http.Request)

	// (GET /api/opml)
	OpmlExport(w http.ResponseWriter, r *http.Request)

	// (POST /api/opml)
	OpmlImport(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/pin)
	RemoveAllPin(w http.ResponseWriter, r *http.Request)

	// (GET /api/pin)
	PinnedItems(w http.ResponseWriter, r *http.Request)

	// (POST /api/pin)
	SetPin(w http.ResponseWriter, r *http.Request)

	// (POST /api/pin/asread)
	SetAsRead(w http.ResponseWriter, r *http.Request)

	// (GET /api/profile)
	Profile(w http.ResponseWriter, r *http.Request)

	// (PUT /api/profile)
	UpdateProfile(w http.ResponseWriter, r *http.Request)

	// (GET /api/subscription)
	Subscriptions(w http.ResponseWriter, r *http.Request)

	// (POST /api/subscription)
	RegisterSubscription(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/subscription/{id})
	DeleteSubscription(w http.ResponseWriter, r *http.Request, id uint64)

	// (PUT /api/subscription/{id})
	ChangeSubscription(w http.ResponseWriter, r *http.Request, id uint64)

	// (POST /api/update_password)
	UpdatePassword(w http.ResponseWriter, r *http.Request)

	// (GET /{filename})
	ServeRootFile(w http.ResponseWriter, r *http.Request, filename string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Index operation middleware
func (siw *ServerInterfaceWrapper) Index(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Index(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Categories operation middleware
func (siw *ServerInterfaceWrapper) Categories(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Categories(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterCategory operation middleware
func (siw *ServerInterfaceWrapper) RegisterCategory(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterCategory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UnreadEntry operation middleware
func (siw *ServerInterfaceWrapper) UnreadEntry(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "category_id" -------------
	var categoryId uint64

	err = runtime.BindStyledParameterWithOptions("simple", "category_id", r.PathValue("category_id"), &categoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "category_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnreadEntry(w, r, categoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteCategory operation middleware
func (siw *ServerInterfaceWrapper) DeleteCategory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCategory(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CategoryAndUnreadEntryCount operation middleware
func (siw *ServerInterfaceWrapper) CategoryAndUnreadEntryCount(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CategoryAndUnreadEntryCount(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ExamineSubscription operation middleware
func (siw *ServerInterfaceWrapper) ExamineSubscription(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExamineSubscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Logout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OpmlExport operation middleware
func (siw *ServerInterfaceWrapper) OpmlExport(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OpmlExport(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OpmlImport operation middleware
func (siw *ServerInterfaceWrapper) OpmlImport(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OpmlImport(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RemoveAllPin operation middleware
func (siw *ServerInterfaceWrapper) RemoveAllPin(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveAllPin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PinnedItems operation middleware
func (siw *ServerInterfaceWrapper) PinnedItems(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PinnedItems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SetPin operation middleware
func (siw *ServerInterfaceWrapper) SetPin(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetPin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SetAsRead operation middleware
func (siw *ServerInterfaceWrapper) SetAsRead(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetAsRead(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Profile operation middleware
func (siw *ServerInterfaceWrapper) Profile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Profile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProfile operation middleware
func (siw *ServerInterfaceWrapper) UpdateProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProfile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Subscriptions operation middleware
func (siw *ServerInterfaceWrapper) Subscriptions(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Subscriptions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterSubscription operation middleware
func (siw *ServerInterfaceWrapper) RegisterSubscription(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterSubscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubscription(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ChangeSubscription operation middleware
func (siw *ServerInterfaceWrapper) ChangeSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ChangeSubscription(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePassword operation middleware
func (siw *ServerInterfaceWrapper) UpdatePassword(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePassword(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ServeRootFile operation middleware
func (siw *ServerInterfaceWrapper) ServeRootFile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "filename" -------------
	var filename string

	err = runtime.BindStyledParameterWithOptions("simple", "filename", r.PathValue("filename"), &filename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filename", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ServeRootFile(w, r, filename)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/", wrapper.Index)
	m.HandleFunc("GET "+options.BaseURL+"/api/category", wrapper.Categories)
	m.HandleFunc("POST "+options.BaseURL+"/api/category", wrapper.RegisterCategory)
	m.HandleFunc("GET "+options.BaseURL+"/api/category/{category_id}/entry", wrapper.UnreadEntry)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/category/{id}", wrapper.DeleteCategory)
	m.HandleFunc("GET "+options.BaseURL+"/api/category_with_count", wrapper.CategoryAndUnreadEntryCount)
	m.HandleFunc("POST "+options.BaseURL+"/api/examine_subscription", wrapper.ExamineSubscription)
	m.HandleFunc("POST "+options.BaseURL+"/api/login", wrapper.Login)
	m.HandleFunc("POST "+options.BaseURL+"/api/logout", wrapper.Logout)
	m.HandleFunc("GET "+options.BaseURL+"/api/opml", wrapper.OpmlExport)
	m.HandleFunc("POST "+options.BaseURL+"/api/opml", wrapper.OpmlImport)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/pin", wrapper.RemoveAllPin)
	m.HandleFunc("GET "+options.BaseURL+"/api/pin", wrapper.PinnedItems)
	m.HandleFunc("POST "+options.BaseURL+"/api/pin", wrapper.SetPin)
	m.HandleFunc("POST "+options.BaseURL+"/api/pin/asread", wrapper.SetAsRead)
	m.HandleFunc("GET "+options.BaseURL+"/api/profile", wrapper.Profile)
	m.HandleFunc("PUT "+options.BaseURL+"/api/profile", wrapper.UpdateProfile)
	m.HandleFunc("GET "+options.BaseURL+"/api/subscription", wrapper.Subscriptions)
	m.HandleFunc("POST "+options.BaseURL+"/api/subscription", wrapper.RegisterSubscription)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/subscription/{id}", wrapper.DeleteSubscription)
	m.HandleFunc("PUT "+options.BaseURL+"/api/subscription/{id}", wrapper.ChangeSubscription)
	m.HandleFunc("POST "+options.BaseURL+"/api/update_password", wrapper.UpdatePassword)
	m.HandleFunc("GET "+options.BaseURL+"/{filename}", wrapper.ServeRootFile)

	return m
}

type IndexRequestObject struct {
}

type IndexResponseObject interface {
	VisitIndexResponse(w http.ResponseWriter) error
}

type Index200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response Index200TexthtmlResponse) VisitIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CategoriesRequestObject struct {
}

type CategoriesResponseObject interface {
	VisitCategoriesResponse(w http.ResponseWriter) error
}

type Categories200JSONResponse []Category

func (response Categories200JSONResponse) VisitCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RegisterCategoryRequestObject struct {
	Body *RegisterCategoryJSONRequestBody
}

type RegisterCategoryResponseObject interface {
	VisitRegisterCategoryResponse(w http.ResponseWriter) error
}

type RegisterCategory201Response struct {
}

func (response RegisterCategory201Response) VisitRegisterCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type RegisterCategory400Response struct {
}

func (response RegisterCategory400Response) VisitRegisterCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type RegisterCategory409Response struct {
}

func (response RegisterCategory409Response) VisitRegisterCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type UnreadEntryRequestObject struct {
	CategoryId uint64 `json:"category_id"`
}

type UnreadEntryResponseObject interface {
	VisitUnreadEntryResponse(w http.ResponseWriter) error
}

type UnreadEntry200JSONResponse []UnreadEntry

func (response UnreadEntry200JSONResponse) VisitUnreadEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategoryRequestObject struct {
	Id uint64 `json:"id"`
}

type DeleteCategoryResponseObject interface {
	VisitDeleteCategoryResponse(w http.ResponseWriter) error
}

type DeleteCategory204Response struct {
}

func (response DeleteCategory204Response) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CategoryAndUnreadEntryCountRequestObject struct {
}

type CategoryAndUnreadEntryCountResponseObject interface {
	VisitCategoryAndUnreadEntryCountResponse(w http.ResponseWriter) error
}

type CategoryAndUnreadEntryCount200JSONResponse []CategoryAndUnreadEntryCount

func (response CategoryAndUnreadEntryCount200JSONResponse) VisitCategoryAndUnreadEntryCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CategoryAndUnreadEntryCount400Response struct {
}

func (response CategoryAndUnreadEntryCount400Response) VisitCategoryAndUnreadEntryCountResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ExamineSubscriptionRequestObject struct {
	Body *ExamineSubscriptionJSONRequestBody
}

type ExamineSubscriptionResponseObject interface {
	VisitExamineSubscriptionResponse(w http.ResponseWriter) error
}

type ExamineSubscription200JSONResponse ExamineSubscription

func (response ExamineSubscription200JSONResponse) VisitExamineSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse Authorization

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LogindefaultResponseHeaders struct {
	WWWAuthenticate string
}

type LogindefaultResponse struct {
	Headers LogindefaultResponseHeaders

	StatusCode int
}

func (response LogindefaultResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("WWW-Authenticate", fmt.Sprint(response.Headers.WWWAuthenticate))
	w.WriteHeader(response.StatusCode)
	return nil
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout204Response struct {
}

func (response Logout204Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type OpmlExportRequestObject struct {
}

type OpmlExportResponseObject interface {
	VisitOpmlExportResponse(w http.ResponseWriter) error
}

type OpmlExport200JSONResponse struct {
	// Xml XML document
	Xml string `json:"xml"`
}

func (response OpmlExport200JSONResponse) VisitOpmlExportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OpmlImportRequestObject struct {
	Body *OpmlImportJSONRequestBody
}

type OpmlImportResponseObject interface {
	VisitOpmlImportResponse(w http.ResponseWriter) error
}

type OpmlImport201Response struct {
}

func (response OpmlImport201Response) VisitOpmlImportResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type RemoveAllPinRequestObject struct {
}

type RemoveAllPinResponseObject interface {
	VisitRemoveAllPinResponse(w http.ResponseWriter) error
}

type RemoveAllPin204Response struct {
}

func (response RemoveAllPin204Response) VisitRemoveAllPinResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PinnedItemsRequestObject struct {
}

type PinnedItemsResponseObject interface {
	VisitPinnedItemsResponse(w http.ResponseWriter) error
}

type PinnedItems200JSONResponse []PinnedItem

func (response PinnedItems200JSONResponse) VisitPinnedItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SetPinRequestObject struct {
	Body *SetPinJSONRequestBody
}

type SetPinResponseObject interface {
	VisitSetPinResponse(w http.ResponseWriter) error
}

type SetPin200JSONResponse struct {
	Readflag pin.ReadFlag `json:"readflag"`
}

func (response SetPin200JSONResponse) VisitSetPinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SetAsReadRequestObject struct {
	Body *SetAsReadJSONRequestBody
}

type SetAsReadResponseObject interface {
	VisitSetAsReadResponse(w http.ResponseWriter) error
}

type SetAsRead201Response struct {
}

func (response SetAsRead201Response) VisitSetAsReadResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type SetAsRead400Response struct {
}

func (response SetAsRead400Response) VisitSetAsReadResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ProfileRequestObject struct {
}

type ProfileResponseObject interface {
	VisitProfileResponse(w http.ResponseWriter) error
}

type Profile200JSONResponse Profile

func (response Profile200JSONResponse) VisitProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfileRequestObject struct {
	Body *UpdateProfileJSONRequestBody
}

type UpdateProfileResponseObject interface {
	VisitUpdateProfileResponse(w http.ResponseWriter) error
}

type UpdateProfile204Response struct {
}

func (response UpdateProfile204Response) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateProfile400Response struct {
}

func (response UpdateProfile400Response) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SubscriptionsRequestObject struct {
}

type SubscriptionsResponseObject interface {
	VisitSubscriptionsResponse(w http.ResponseWriter) error
}

type Subscriptions200JSONResponse []Subscription

func (response Subscriptions200JSONResponse) VisitSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RegisterSubscriptionRequestObject struct {
	Body *RegisterSubscriptionJSONRequestBody
}

type RegisterSubscriptionResponseObject interface {
	VisitRegisterSubscriptionResponse(w http.ResponseWriter) error
}

type RegisterSubscription201Response struct {
}

func (response RegisterSubscription201Response) VisitRegisterSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type RegisterSubscription400Response struct {
}

func (response RegisterSubscription400Response) VisitRegisterSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type RegisterSubscription409Response struct {
}

func (response RegisterSubscription409Response) VisitRegisterSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type DeleteSubscriptionRequestObject struct {
	Id uint64 `json:"id"`
}

type DeleteSubscriptionResponseObject interface {
	VisitDeleteSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteSubscription204Response struct {
}

func (response DeleteSubscription204Response) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ChangeSubscriptionRequestObject struct {
	Id   uint64 `json:"id"`
	Body *ChangeSubscriptionJSONRequestBody
}

type ChangeSubscriptionResponseObject interface {
	VisitChangeSubscriptionResponse(w http.ResponseWriter) error
}

type ChangeSubscription204Response struct {
}

func (response ChangeSubscription204Response) VisitChangeSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdatePasswordRequestObject struct {
	Body *UpdatePasswordJSONRequestBody
}

type UpdatePasswordResponseObject interface {
	VisitUpdatePasswordResponse(w http.ResponseWriter) error
}

type UpdatePassword201Response struct {
}

func (response UpdatePassword201Response) VisitUpdatePasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type UpdatePassword400JSONResponse struct {
	Error string `json:"error"`
}

func (response UpdatePassword400JSONResponse) VisitUpdatePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ServeRootFileRequestObject struct {
	Filename string `json:"filename"`
}

type ServeRootFileResponseObject interface {
	VisitServeRootFileResponse(w http.ResponseWriter) error
}

type ServeRootFile200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ServeRootFile200TexthtmlResponse) VisitServeRootFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ServeRootFile404Response struct {
}

func (response ServeRootFile404Response) VisitServeRootFileResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /)
	Index(ctx context.Context, request IndexRequestObject) (IndexResponseObject, error)

	// (GET /api/category)
	Categories(ctx context.Context, request CategoriesRequestObject) (CategoriesResponseObject, error)

	// (POST /api/category)
	RegisterCategory(ctx context.Context, request RegisterCategoryRequestObject) (RegisterCategoryResponseObject, error)

	// (GET /api/category/{category_id}/entry)
	UnreadEntry(ctx context.Context, request UnreadEntryRequestObject) (UnreadEntryResponseObject, error)

	// (DELETE /api/category/{id})
	DeleteCategory(ctx context.Context, request DeleteCategoryRequestObject) (DeleteCategoryResponseObject, error)

	// (GET /api/category_with_count)
	CategoryAndUnreadEntryCount(ctx context.Context, request CategoryAndUnreadEntryCountRequestObject) (CategoryAndUnreadEntryCountResponseObject, error)

	// (POST /api/examine_subscription)
	ExamineSubscription(ctx context.Context, request ExamineSubscriptionRequestObject) (ExamineSubscriptionResponseObject, error)

	// (POST /api/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)

	// (POST /api/logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)

	// (GET /api/opml)
	OpmlExport(ctx context.Context, request OpmlExportRequestObject) (OpmlExportResponseObject, error)

	// (POST /api/opml)
	OpmlImport(ctx context.Context, request OpmlImportRequestObject) (OpmlImportResponseObject, error)

	// (DELETE /api/pin)
	RemoveAllPin(ctx context.Context, request RemoveAllPinRequestObject) (RemoveAllPinResponseObject, error)

	// (GET /api/pin)
	PinnedItems(ctx context.Context, request PinnedItemsRequestObject) (PinnedItemsResponseObject, error)

	// (POST /api/pin)
	SetPin(ctx context.Context, request SetPinRequestObject) (SetPinResponseObject, error)

	// (POST /api/pin/asread)
	SetAsRead(ctx context.Context, request SetAsReadRequestObject) (SetAsReadResponseObject, error)

	// (GET /api/profile)
	Profile(ctx context.Context, request ProfileRequestObject) (ProfileResponseObject, error)

	// (PUT /api/profile)
	UpdateProfile(ctx context.Context, request UpdateProfileRequestObject) (UpdateProfileResponseObject, error)

	// (GET /api/subscription)
	Subscriptions(ctx context.Context, request SubscriptionsRequestObject) (SubscriptionsResponseObject, error)

	// (POST /api/subscription)
	RegisterSubscription(ctx context.Context, request RegisterSubscriptionRequestObject) (RegisterSubscriptionResponseObject, error)

	// (DELETE /api/subscription/{id})
	DeleteSubscription(ctx context.Context, request DeleteSubscriptionRequestObject) (DeleteSubscriptionResponseObject, error)

	// (PUT /api/subscription/{id})
	ChangeSubscription(ctx context.Context, request ChangeSubscriptionRequestObject) (ChangeSubscriptionResponseObject, error)

	// (POST /api/update_password)
	UpdatePassword(ctx context.Context, request UpdatePasswordRequestObject) (UpdatePasswordResponseObject, error)

	// (GET /{filename})
	ServeRootFile(ctx context.Context, request ServeRootFileRequestObject) (ServeRootFileResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Index operation middleware
func (sh *strictHandler) Index(w http.ResponseWriter, r *http.Request) {
	var request IndexRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Index(ctx, request.(IndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Index")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(IndexResponseObject); ok {
		if err := validResponse.VisitIndexResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Categories operation middleware
func (sh *strictHandler) Categories(w http.ResponseWriter, r *http.Request) {
	var request CategoriesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Categories(ctx, request.(CategoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Categories")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CategoriesResponseObject); ok {
		if err := validResponse.VisitCategoriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterCategory operation middleware
func (sh *strictHandler) RegisterCategory(w http.ResponseWriter, r *http.Request) {
	var request RegisterCategoryRequestObject

	var body RegisterCategoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterCategory(ctx, request.(RegisterCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RegisterCategoryResponseObject); ok {
		if err := validResponse.VisitRegisterCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UnreadEntry operation middleware
func (sh *strictHandler) UnreadEntry(w http.ResponseWriter, r *http.Request, categoryId uint64) {
	var request UnreadEntryRequestObject

	request.CategoryId = categoryId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UnreadEntry(ctx, request.(UnreadEntryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnreadEntry")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UnreadEntryResponseObject); ok {
		if err := validResponse.VisitUnreadEntryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCategory operation middleware
func (sh *strictHandler) DeleteCategory(w http.ResponseWriter, r *http.Request, id uint64) {
	var request DeleteCategoryRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCategory(ctx, request.(DeleteCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteCategoryResponseObject); ok {
		if err := validResponse.VisitDeleteCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CategoryAndUnreadEntryCount operation middleware
func (sh *strictHandler) CategoryAndUnreadEntryCount(w http.ResponseWriter, r *http.Request) {
	var request CategoryAndUnreadEntryCountRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CategoryAndUnreadEntryCount(ctx, request.(CategoryAndUnreadEntryCountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CategoryAndUnreadEntryCount")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CategoryAndUnreadEntryCountResponseObject); ok {
		if err := validResponse.VisitCategoryAndUnreadEntryCountResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExamineSubscription operation middleware
func (sh *strictHandler) ExamineSubscription(w http.ResponseWriter, r *http.Request) {
	var request ExamineSubscriptionRequestObject

	var body ExamineSubscriptionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExamineSubscription(ctx, request.(ExamineSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExamineSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExamineSubscriptionResponseObject); ok {
		if err := validResponse.VisitExamineSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(w http.ResponseWriter, r *http.Request) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Logout operation middleware
func (sh *strictHandler) Logout(w http.ResponseWriter, r *http.Request) {
	var request LogoutRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx, request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		if err := validResponse.VisitLogoutResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OpmlExport operation middleware
func (sh *strictHandler) OpmlExport(w http.ResponseWriter, r *http.Request) {
	var request OpmlExportRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OpmlExport(ctx, request.(OpmlExportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OpmlExport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OpmlExportResponseObject); ok {
		if err := validResponse.VisitOpmlExportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OpmlImport operation middleware
func (sh *strictHandler) OpmlImport(w http.ResponseWriter, r *http.Request) {
	var request OpmlImportRequestObject

	var body OpmlImportJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OpmlImport(ctx, request.(OpmlImportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OpmlImport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OpmlImportResponseObject); ok {
		if err := validResponse.VisitOpmlImportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveAllPin operation middleware
func (sh *strictHandler) RemoveAllPin(w http.ResponseWriter, r *http.Request) {
	var request RemoveAllPinRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveAllPin(ctx, request.(RemoveAllPinRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveAllPin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RemoveAllPinResponseObject); ok {
		if err := validResponse.VisitRemoveAllPinResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PinnedItems operation middleware
func (sh *strictHandler) PinnedItems(w http.ResponseWriter, r *http.Request) {
	var request PinnedItemsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PinnedItems(ctx, request.(PinnedItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PinnedItems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PinnedItemsResponseObject); ok {
		if err := validResponse.VisitPinnedItemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SetPin operation middleware
func (sh *strictHandler) SetPin(w http.ResponseWriter, r *http.Request) {
	var request SetPinRequestObject

	var body SetPinJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SetPin(ctx, request.(SetPinRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetPin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SetPinResponseObject); ok {
		if err := validResponse.VisitSetPinResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SetAsRead operation middleware
func (sh *strictHandler) SetAsRead(w http.ResponseWriter, r *http.Request) {
	var request SetAsReadRequestObject

	var body SetAsReadJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SetAsRead(ctx, request.(SetAsReadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetAsRead")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SetAsReadResponseObject); ok {
		if err := validResponse.VisitSetAsReadResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Profile operation middleware
func (sh *strictHandler) Profile(w http.ResponseWriter, r *http.Request) {
	var request ProfileRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Profile(ctx, request.(ProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Profile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ProfileResponseObject); ok {
		if err := validResponse.VisitProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProfile operation middleware
func (sh *strictHandler) UpdateProfile(w http.ResponseWriter, r *http.Request) {
	var request UpdateProfileRequestObject

	var body UpdateProfileJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProfile(ctx, request.(UpdateProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProfileResponseObject); ok {
		if err := validResponse.VisitUpdateProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Subscriptions operation middleware
func (sh *strictHandler) Subscriptions(w http.ResponseWriter, r *http.Request) {
	var request SubscriptionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Subscriptions(ctx, request.(SubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Subscriptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SubscriptionsResponseObject); ok {
		if err := validResponse.VisitSubscriptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterSubscription operation middleware
func (sh *strictHandler) RegisterSubscription(w http.ResponseWriter, r *http.Request) {
	var request RegisterSubscriptionRequestObject

	var body RegisterSubscriptionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterSubscription(ctx, request.(RegisterSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RegisterSubscriptionResponseObject); ok {
		if err := validResponse.VisitRegisterSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSubscription operation middleware
func (sh *strictHandler) DeleteSubscription(w http.ResponseWriter, r *http.Request, id uint64) {
	var request DeleteSubscriptionRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubscription(ctx, request.(DeleteSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeSubscription operation middleware
func (sh *strictHandler) ChangeSubscription(w http.ResponseWriter, r *http.Request, id uint64) {
	var request ChangeSubscriptionRequestObject

	request.Id = id

	var body ChangeSubscriptionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeSubscription(ctx, request.(ChangeSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ChangeSubscriptionResponseObject); ok {
		if err := validResponse.VisitChangeSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePassword operation middleware
func (sh *strictHandler) UpdatePassword(w http.ResponseWriter, r *http.Request) {
	var request UpdatePasswordRequestObject

	var body UpdatePasswordJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePassword(ctx, request.(UpdatePasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePassword")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdatePasswordResponseObject); ok {
		if err := validResponse.VisitUpdatePasswordResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ServeRootFile operation middleware
func (sh *strictHandler) ServeRootFile(w http.ResponseWriter, r *http.Request, filename string) {
	var request ServeRootFileRequestObject

	request.Filename = filename

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ServeRootFile(ctx, request.(ServeRootFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ServeRootFile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ServeRootFileResponseObject); ok {
		if err := validResponse.VisitServeRootFileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
